const swaggerAutogen = require('swagger-autogen')();
const YAML = require('yamljs');
const path = require('path');
const fs = require('fs');

// Load parts of the existing OpenAPI YAML to reuse info
// NOTE: This is a simplified approach. For a complex setup,
// you might parse and deeply merge structures if you want to reuse schemas
// directly in this definition file. However, swagger-autogen encourages
// defining schemas within JSDoc in the route files or via its own schema objects.
let docInfo = {};
let components = {};
let servers = [];

try {
    const existingSwaggerPath = path.join(__dirname, 'docs/openapi.yml');
    if (fs.existsSync(existingSwaggerPath)) {
        const existingSwagger = YAML.load(existingSwaggerPath);
        if (existingSwagger.info) {
            docInfo = {
                title: existingSwagger.info.title || 'Tournament Platform API',
                description: existingSwagger.info.description || 'API documentation for the project.',
                version: existingSwagger.info.version || '1.0.0', // Default to package.json version if not in openapi.yml
                contact: existingSwagger.info.contact,
                license: existingSwagger.info.license,
            };
        }
        if (existingSwagger.servers) {
            servers = existingSwagger.servers;
        }
        // We will try to define most components (schemas, securitySchemes) via JSDoc.
        // However, securitySchemes are good to define globally if they are consistent.
        if (existingSwagger.components && existingSwagger.components.securitySchemes) {
            components.securitySchemes = existingSwagger.components.securitySchemes;
        }
    }
} catch (error) {
    console.warn("Could not load or parse existing docs/openapi.yml. Using defaults.", error);
}

// Fallback for version if not found
if (!docInfo.version) {
    try {
        const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'));
        docInfo.version = packageJson.version || '1.0.0';
    } catch (e) {
        docInfo.version = '1.0.0';
    }
}
if (Object.keys(docInfo).length === 0) { // If openapi.yml was totally empty or missing
    docInfo = {
        title: 'Tournament Platform API',
        description: 'API documentation for the project, auto-generated by swagger-autogen.',
        version: '1.0.0', // Consider reading from package.json
    };
}


const doc = {
    info: docInfo,
    servers: servers.length > 0 ? servers : [ // Provide a default if not found
        {
            url: 'http://localhost:3000/api/v1',
            description: 'Development server'
        }
    ],
    // host: 'localhost:3000', // For OpenAPI 2.0. For 3.0, use servers array.
    // basePath: '/api/v1', // For OpenAPI 2.0. For 3.0, include in server urls.
    schemes: ['http', 'https'], // For OpenAPI 2.0
    consumes: ['application/json'], // For OpenAPI 2.0
    produces: ['application/json'], // For OpenAPI 2.0
    tags: [ // Optional: Define tags here or let them be generated from route files
        { name: 'Admin', description: 'Admin specific operations' },
        { name: 'Auth', description: 'Authentication related endpoints' },
        { name: 'Games', description: 'Game management endpoints' },
        { name: 'Leaderboards', description: 'Leaderboard information' },
        { name: 'Matches', description: 'Match management and result submission' },
        { name: 'Teams', description: 'Team creation and management' },
        { name: 'Tournaments', description: 'Tournament management' },
        { name: 'Users', description: 'User profile and game profile management' },
        { name: 'Wallet', description: 'Wallet and transaction management' },
        { name: 'Webhooks', description: 'Webhook endpoints for external services'}
    ],
    components: components, // This will include securitySchemes if found
    // Not recommended to define all schemas here if using JSDoc extensively
    // definitions: { // For OpenAPI 2.0 schemas. For 3.0, use components.schemas
    // Example:
    // MyObject: { type: "object", properties: { id: { type: "integer" }, name: { type: "string" } } }
    // },
    securityDefinitions: { // For OpenAPI 2.0 security. For 3.0, use components.securitySchemes
        // Example:
        // bearerAuth: { type: "apiKey", name: "Authorization", in: "header" }
    },
    // You can define global parameters, responses, etc. here as well
    // swagger: "2.0", // Default is 3.0.0 by swagger-autogen
    openapi: "3.0.3" // Explicitly set version
};

const outputFile = './docs/swagger-generated.json';
// const outputFileYAML = './docs/swagger-generated.yaml'; // Alternative output

// Adjust the glob pattern to match your route file structure.
// This pattern assumes all your route files end with .routes.js and are in src/presentation/api/
const endpointsFiles = [
    './src/app.js', // Include app.js if it has some simple routes or for general app context
    './src/presentation/api/admin.routes.js',
    './src/presentation/api/auth.routes.js',
    './src/presentation/api/games.routes.js',
    './src/presentation/api/leaderboards.routes.js',
    './src/presentation/api/matches.routes.js',
    './src/presentation/api/teams.routes.js',
    './src/presentation/api/tournaments.routes.js',
    './src/presentation/api/users.routes.js',
    './src/presentation/api/wallet.routes.js'
];

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
    console.log(`Swagger JSON file generated at ${outputFile}`);
    // Example: To also generate a YAML file after JSON is created:
    // const yaml = require('js-yaml');
    // try {
    //   const jsonSpec = JSON.parse(fs.readFileSync(outputFile, 'utf8'));
    //   const yamlSpec = yaml.dump(jsonSpec);
    //   fs.writeFileSync('./docs/swagger-generated.yaml', yamlSpec, 'utf8');
    //   console.log('Swagger YAML file also generated at ./docs/swagger-generated.yaml');
    // } catch (e) {
    //   console.error("Could not convert JSON to YAML or write YAML file:", e);
    // }
}).catch(err => {
    console.error("Error generating Swagger file:", err);
});
