openapi: 3.0.3
info:
  title: Tournament Platform API
  version: v1
  description: |
    API for the Tournament Platform, enabling user management, wallet operations, tournament participation, and administrative functions.
    Key features include secure authentication, real-time match updates, and role-based access control.
  contact:
    name: Support Team
    email: support@example-tournament.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:{port}/api/v1
    description: Local development server
    variables:
      port:
        default: '3000'
        description: Port for the local server
  - url: https://staging.example-tournament.com/api/v1
    description: Staging server
  - url: https://api.example-tournament.com/api/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Access Token for authentication. Example: 'Bearer {token}'"
    refreshTokenCookie:
      type: apiKey
      in: cookie
      name: jid # Matches JWT_REFRESH_COOKIE_NAME from .env.example
      description: "HttpOnly cookie containing the Refresh Token."

  schemas:
    # Common Schemas
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        message:
          type: string
          example: "Validation Error"
        errors:
          type: array
          items:
            type: string
          example: ["'email' is required"]
        stack:
          type: string

    # Auth Schemas
    UserRegistrationRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          example: "player123"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "Str0ngP@sswOrd!"

    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "Str0ngP@sswOrd!"

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        accessToken:
          type: string
          format: jwt
          description: "Short-lived Access Token"
        user:
          $ref: '#/components/schemas/UserPublicProfile'

    RefreshTokenRequest:
      type: object
      description: "Request to refresh access token using HttpOnly refresh token cookie."

    UserPublicProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        username:
          type: string
          example: "player123"
        role:
          type: string
          enum: [User, Admin, DisputeModerator, FinanceManager]
          example: "User"

    # Wallet Schemas
    WalletDetailsResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Wallet ID.
          example: "123e4567-e89b-12d3-a456-426614174000"
        userId:
          type: string
          format: uuid
          description: User ID associated with the wallet.
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        balance:
          type: number
          format: float
          description: Current wallet balance.
          example: 100.50
        currency:
          type: string
          description: Currency code (e.g., USD).
          example: "USD"
        createdAt:
          type: string
          format: date-time
          description: Wallet creation timestamp.
        updatedAt:
          type: string
          format: date-time
          description: Wallet last update timestamp.

    WalletInitializeDepositRequest:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          format: float # Should be integer for Rials, but float for flexibility if other currencies are used.
          minimum: 1000 # Example: Minimum 1000 Rials for Zarinpal
          description: "Amount to deposit. For Zarinpal, this should be in Rials."
          example: 50000
        currency:
          type: string
          maxLength: 3
          description: "Currency code. For Zarinpal, this should be 'IRR'."
          example: "IRR"

    WalletInitializeDepositResponse:
      type: object
      properties:
        message:
          type: string
          example: "Deposit initialized. Proceed to Zarinpal payment gateway."
        paymentGatewayUrl:
          type: string
          format: url
          description: "URL to redirect the user to for payment with Zarinpal."
          example: "https://sandbox.zarinpal.com/pg/StartPay/A0000000000000000000000000000000000"
        transactionId:
          type: string
          format: uuid
          description: "Internal transaction ID for tracking."
          example: "b2c3d4e5-f6a7-8901-2345-678901bcdef0"
        authority:
          type: string
          description: "Zarinpal authority code for this payment request."
          example: "A0000000000000000000000000000000000"

    # Schema for Zarinpal callback (Not a request body, but for documentation of query params)
    ZarinpalCallbackQueryParams:
      type: object
      properties:
        Authority:
          type: string
          description: "The authority code returned by Zarinpal."
          example: "A0000000000000000000000000000000000"
        Status:
          type: string
          description: "Payment status from Zarinpal ('OK' or 'NOK')."
          example: "OK"

    PaymentWebhookPayload: # This is for a generic webhook, may not be Zarinpal specific
      type: object
      properties:
        transactionId:
          type: string
          example: "gateway_tx_123"
        internalTransactionId:
          type: string
          format: uuid
          example: "b2c3d4e5-f6a7-8901-2345-678901bcdef0"
        status:
          type: string
          enum: [success, failed, pending]
          example: "success"
        amount:
          type: number
          format: float
          example: 20.50
        currency:
          type: string
          example: "USD"
        timestamp:
          type: string
          format: date-time
        signature:
          type: string
          example: "abc123def456..."

    TransactionHistoryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          example: "DEPOSIT"
        amount:
          type: number
          format: float
        status:
          type: string
          example: "COMPLETED"
        description:
          type: string
          nullable: true
        transactionDate:
          type: string
          format: date-time

    PaginatedTransactionHistory:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 48
        items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionHistoryItem'

    PayPalWithdrawalDetails:
      type: object
      description: Details for PayPal withdrawal.
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    BankTransferWithdrawalDetails:
      type: object
      description: Details for Bank Transfer withdrawal.
      required:
        - accountNumber
        - routingNumber
        - accountHolderName
      properties:
        accountHolderName:
          type: string
          example: "Jane Doe"
        accountNumber:
          type: string
          example: "1234567890"
        routingNumber:
          type: string
          example: "021000021"
        bankName:
          type: string
          nullable: true
          example: "Anytown Bank"

    WithdrawalRequest:
      type: object
      required:
        - amount
        - currency
        - withdrawalMethodDetails
      properties:
        amount:
          type: number
          format: float
          minimum: 1.00
          example: 50.00
        currency:
          type: string
          maxLength: 3
          example: "USD"
        withdrawalMethodDetails:
          type: object
          description: "Details for the withdrawal method. Structure depends on the 'type' field within this object."
          required:
            - type
          properties:
            type:
              type: string
              description: The type of withdrawal method.
              enum: [PAYPAL, BANK_TRANSFER]
              example: "PAYPAL"
          oneOf:
             - $ref: '#/components/schemas/PayPalWithdrawalDetails'
             - $ref: '#/components/schemas/BankTransferWithdrawalDetails'
          example: # This example will be overridden by oneOf usually, but good for illustration
            type: PAYPAL
            email: user@example.com

    WithdrawalResponse:
      type: object
      properties:
        message:
          type: string
          example: "Withdrawal request submitted for approval."
        transactionId:
          type: string
          format: uuid

    # Tournament Schemas
    CreateTournamentRequest:
      type: object
      required:
        - name
        - gameId
        - entryFee
        - prizePool
        - maxParticipants
        - startDate
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          example: "Valorant Weekly Clash"
        gameId:
          type: string
          format: uuid
          example: "some-game-uuid-12345"
        description:
          type: string
          maxLength: 1000
          nullable: true
          example: "Join us for the weekly Valorant tournament!"
        rules:
          type: string
          maxLength: 5000
          nullable: true
          example: "Standard competitive rules apply. Single elimination."
        entryFee:
          type: number
          format: float # Assuming precision 2 handled by validation
          minimum: 0
          example: 10.00
        prizePool:
          type: number
          format: float # Assuming precision 2 handled by validation
          minimum: 0
          example: 1000.00
        maxParticipants:
          type: integer
          minimum: 2
          maximum: 1024 # Example
          example: 64
        startDate:
          type: string
          format: date-time # ISO 8601
          description: "Tournament start date and time. Must be in the future."
          example: "2024-08-01T18:00:00Z"
        endDate:
          type: string
          format: date-time # ISO 8601
          nullable: true
          description: "Tournament end date and time. Must be after startDate."
          example: "2024-08-01T22:00:00Z"
        # organizerId is typically set by the system based on authenticated admin user

    TournamentSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        gameName:
          type: string
        status:
          type: string
        entryFee:
          type: number
          format: float
        prizePool:
          type: number
          format: float
        maxParticipants:
          type: integer
        currentParticipants:
          type: integer
        startDate:
          type: string
          format: date-time

    PaginatedTournaments:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/TournamentSummary'

    TournamentDetails:
      allOf:
        - $ref: '#/components/schemas/TournamentSummary'
        - type: object
          properties:
            description:
              type: string
              nullable: true
            rules:
              type: string
              nullable: true
            endDate:
              type: string
              format: date-time
              nullable: true
            organizerId:
              type: string
              format: uuid
              nullable: true

    TournamentRegistrationResponse:
      type: object
      properties:
        message:
          type: string
          example: "Successfully registered for the tournament."
        tournamentId:
          type: string
          format: uuid
        participantId:
          type: string
          format: uuid

    # Match Schemas
    MatchParticipantInfo: # Helper schema for MatchDetails
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Participant's User ID or Team ID.
        name:
          type: string
          description: Username or Team Name.
        inGameName: # Added from GetMatchUseCase logic
          type: string
          nullable: true
          description: In-game name for the relevant game.

    MatchDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tournamentId:
          type: string
          format: uuid
        round:
          type: integer
          example: 1
        matchNumberInRound:
          type: integer
          example: 1
        participant1:
          $ref: '#/components/schemas/MatchParticipantInfo'
        participant2:
          $ref: '#/components/schemas/MatchParticipantInfo'
        status:
          type: string
          enum: [PENDING, ONGOING, COMPLETED, DISPUTED, CANCELED]
          example: "PENDING"
        scheduledTime:
          type: string
          format: date-time
          nullable: true
        actualStartTime:
          type: string
          format: date-time
          nullable: true
        actualEndTime:
          type: string
          format: date-time
          nullable: true
        winningParticipantId:
          type: string
          format: uuid
          nullable: true
        scoreParticipant1:
          type: integer
          nullable: true
        scoreParticipant2:
          type: integer
          nullable: true
        resultScreenshotUrl: # Changed from fileKey for client consumption
          type: string
          format: url
          nullable: true
        resultComments:
          type: string
          nullable: true
        nextMatchId:
          type: string
          format: uuid
          nullable: true
        nextMatchIsLoserBracket: # For double elimination
          type: boolean
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MatchResultUploadUrlResponse:
      type: object
      properties:
        uploadUrl:
          type: string
          format: url
          description: "Pre-signed URL for uploading the result screenshot."
        fileKey:
          type: string
          description: "The key/path where the file will be stored in S3."

    MatchResultSubmissionRequest:
      type: object
      required:
        - winningParticipantId
        - resultScreenshotFileKey
      properties:
        winningParticipantId:
          type: string
          format: uuid
          description: "ID of the user or team that won."
        scoreParticipant1:
          type: integer
          nullable: true
          example: 2
        scoreParticipant2:
          type: integer
          nullable: true
          example: 1
        resultScreenshotFileKey:
          type: string
          description: "The S3 file key of the uploaded screenshot."
        comments:
          type: string
          nullable: true

    MatchResultResponse:
      type: object
      properties:
        message:
          type: string
          example: "Result submitted. Waiting for confirmation or scan."
        matchId:
          type: string
          format: uuid
        status:
          type: string
          example: "AWAITING_CONFIRMATION"

    # Admin Schemas
    Dispute:
      type: object
      properties:
        id:
          type: string
          format: uuid
        matchId:
          type: string
          format: uuid
        reporterId:
          type: string
          format: uuid
        reason:
          type: string
        status:
          type: string
          enum: [OPEN, UNDER_REVIEW, RESOLVED_PARTICIPANT1_WIN, RESOLVED_PARTICIPANT2_WIN, RESOLVED_REPLAY, CLOSED]
        resolutionDetails:
          type: string
          nullable: true
        moderatorId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedDisputes:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/Dispute'

    ResolveDisputeRequest:
      type: object
      required:
        - resolutionStatus
        - resolutionDetails
      properties:
        resolutionStatus:
          type: string
          enum: [RESOLVED_PARTICIPANT1_WIN, RESOLVED_PARTICIPANT2_WIN, RESOLVED_REPLAY, CLOSED_INVALID]
          example: "RESOLVED_PARTICIPANT1_WIN"
        resolutionDetails:
          type: string
          example: "After reviewing evidence, participant 1 is declared the winner."

    WithdrawalForAdmin:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        currency:
          type: string
        status:
          type: string
          enum: [PENDING_APPROVAL, APPROVED, REJECTED, PROCESSING, COMPLETED, FAILED]
        requestedAt:
          type: string
          format: date-time
        withdrawalMethodDetails:
          type: object

    PaginatedWithdrawalsAdmin:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/WithdrawalForAdmin'

    ApproveWithdrawalRequest:
      type: object
      properties:
        notes:
          type: string
          nullable: true
          example: "Approved after verification."

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination.
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    IdempotencyKeyHeader:
      name: X-Idempotency-Key
      in: header
      description: "Unique key (UUID format) to prevent duplicate processing of requests. Required for operations like initializing deposits and submitting withdrawals."
      required: true # This means the header is required if the endpoint lists this parameter.
      schema:
        type: string
        format: uuid
    TournamentIdPath:
      name: id
      in: path
      required: true
      description: ID of the tournament.
      schema:
        type: string
        format: uuid
    MatchIdPath:
      name: id
      in: path
      required: true
      description: ID of the match.
      schema:
        type: string
        format: uuid
    DisputeIdPath:
      name: id
      in: path
      required: true
      description: ID of the dispute ticket.
      schema:
        type: string
        format: uuid
    WithdrawalIdPath:
      name: id
      in: path
      required: true
      description: ID of the withdrawal request.
      schema:
        type: string
        format: uuid

tags:
  - name: Authentication
    description: User registration, login, token refresh, and logout.
  - name: Wallet
    description: Wallet top-up, transaction history, and withdrawals.
  - name: Tournaments
    description: Listing, viewing, and registering for tournaments.
  - name: Matches
    description: Reporting match results and handling disputes.
  - name: Admin - Disputes
    description: Management of dispute tickets by Dispute Moderators.
  - name: Admin - Withdrawals
    description: Management of withdrawal requests by Finance Managers.
  - name: Webhooks
    description: Endpoints for receiving notifications from external services (e.g., payment gateways).

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully. Access token provided, refresh token set in cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jid=yourRefreshToken; Path=/; HttpOnly; Secure; SameSite=Strict
        '400':
          description: Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Log in and receive Access and Refresh Tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: Login successful. Access token provided, refresh token set in cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jid=yourRefreshToken; Path=/; HttpOnly; Secure; SameSite=Strict
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Get a new Access Token using a Refresh Token.
      description: Requires a valid Refresh Token sent via an HttpOnly cookie (`jid`).
      security:
        - refreshTokenCookie: []
      responses:
        '200':
          description: New access token generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    format: jwt
        '401':
          description: Invalid or expired refresh token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Invalidate the Refresh Token for a secure logout.
      description: Requires authentication with an Access Token. Clears the refresh token cookie.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful. Refresh token cookie cleared.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jid=; Path=/; HttpOnly; Expires=Thu, 01 Jan 1970 00:00:00 GMT
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /wallet:
    get:
      tags: [Wallet]
      summary: Get current user's wallet details.
      description: Retrieves the wallet details for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's wallet details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDetailsResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Wallet not found for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /wallet/deposit/initialize:
    post:
      tags: [Wallet]
      summary: Initialize a deposit with Zarinpal.
      description: |
        Initiates a deposit request with Zarinpal.
        The user will be redirected to Zarinpal's payment page.
        Requires user authentication and an Idempotency Key header (UUID format).
        The `amount` should be in Rials and `currency` should be 'IRR'.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletInitializeDepositRequest'
      responses:
        '200':
          description: Deposit initialization successful or idempotent replay. Returns Zarinpal redirect URL and authority.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletInitializeDepositResponse'
        '400':
          description: Validation error (e.g., invalid amount/currency, missing idempotency key) or idempotency key reuse with different payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
        '409':
          description: Idempotency key already processed with a conflicting request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error (e.g., failed to communicate with Zarinpal).

  /wallet/deposit/callback:
    get:
      tags: [Wallet]
      summary: Zarinpal payment callback URL.
      description: |
        Endpoint for Zarinpal to redirect the user after a payment attempt.
        This endpoint is not intended to be called directly by clients.
        It processes the payment verification.
      parameters:
        - name: Authority
          in: query
          required: true
          description: The authority code from Zarinpal.
          schema:
            type: string
        - name: Status
          in: query
          required: true
          description: The payment status from Zarinpal ('OK' or 'NOK').
          schema:
            type: string
            enum: [OK, NOK]
      responses:
        '302':
          description: Redirects the user to a frontend page indicating payment success, failure, or cancellation.
          headers:
            Location:
              description: URL to redirect the user to (e.g., /payment-success?txId=...).
              schema:
                type: string
                format: url
        '400':
          description: Invalid callback parameters (e.g., missing Authority or Status).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction associated with the authority not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error during payment verification or processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /webhooks/payment-gateway: # This is a generic webhook endpoint, Zarinpal uses redirect callback
    post:
      tags: [Webhooks]
      summary: Receive payment confirmation from the payment gateway.
      description: |
        Secured by digital signature verification. The signature should be passed in a header (e.g., `X-Signature`).
        The exact mechanism depends on the payment gateway.
      parameters:
        - name: X-Payment-Signature
          in: header
          required: true
          schema:
            type: string
          description: Digital signature from the payment gateway for webhook verification.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhookPayload'
      responses:
        '200':
          description: Webhook received and processed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Webhook processed"
        '400':
          description: Invalid payload or signature.
        '500':
          description: Internal server error.

  /wallet/history:
    get:
      tags: [Wallet]
      summary: Get transaction history for the logged-in user.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [DEPOSIT, WITHDRAWAL, TOURNAMENT_FEE, PRIZE_PAYOUT, REFUND, ADJUSTMENT_CREDIT, ADJUSTMENT_DEBIT]
          description: Filter by transaction type.
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [PENDING, COMPLETED, FAILED, CANCELED, REQUIRES_APPROVAL, PROCESSING, REFUNDED]
          description: Filter by transaction status.
        - name: sortBy
          in: query
          description: Field to sort by.
          required: false
          schema:
            type: string
            enum: [transactionDate, amount]
            default: transactionDate
        - name: sortOrder
          in: query
          description: Sort order.
          required: false
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          description: A paginated list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionHistory'
        '401':
          description: Unauthorized.
        '500':
          description: Internal server error.

  /wallet/withdrawals:
    post:
      tags: [Wallet]
      summary: Submit a withdrawal request for finance manager approval.
      description: Requires user authentication. An Idempotency Key header (UUID format) is required.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKeyHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalRequest'
      responses:
        '200': # For idempotent replay of an already processed/pending request
          description: Withdrawal request already submitted or being processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawalResponse' # Or a schema that includes status
        '202':
          description: Withdrawal request submitted successfully for approval.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawalResponse'
        '400':
          description: Validation error (e.g., insufficient balance, invalid amount).
        '401':
          description: Unauthorized.
        '409': # For idempotency conflict with different payload
          description: Idempotency key already used with different request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.

  /tournaments:
    get:
      tags: [Tournaments]
      summary: List tournaments with pagination and filtering.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [PENDING, UPCOMING, REGISTRATION_OPEN, REGISTRATION_CLOSED, ONGOING, COMPLETED, CANCELED] # Added UPCOMING
          description: Filter by tournament status.
        - name: gameId # Changed from gameName to gameId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by game ID.
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [startDate, name, entryFee, prizePool]
            default: startDate
          description: Field to sort tournaments by.
        - name: sortOrder
          in: query
          required: false
          schema:
            type: string
            enum: [ASC, DESC]
            default: ASC
          description: Sort order.
        - name: includeGameDetails # From listTournamentsSchema
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: Whether to include detailed game information for each tournament.
      responses:
        '200':
          description: A paginated list of tournaments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTournaments'
        '500':
          description: Internal server error.

  /tournaments/{id}:
    get:
      tags: [Tournaments]
      summary: Get details of a specific tournament.
      parameters:
        - $ref: '#/components/parameters/TournamentIdPath'
        - name: include
          in: query
          required: false
          schema:
            type: string # Could be array with style form, commaDelimited: true
            example: "participants,matches"
          description: Comma-separated list of relations to include (e.g., participants, matches).
      responses:
        '200':
          description: Tournament details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentDetails'
        '404':
          description: Tournament not found.
        '500':
          description: Internal server error.

  /tournaments/{id}/register:
    post:
      tags: [Tournaments]
      summary: Register the logged-in user for a tournament.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TournamentIdPath'
      responses:
        '200':
          description: Successfully registered for the tournament.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentRegistrationResponse'
        '400':
          description: Validation error.
        '401':
          description: Unauthorized.
        '404':
          description: Tournament not found.
        '500':
          description: Internal server error.

  /matches/{id}/results/upload-url:
    post:
      tags: [Matches]
      summary: Get a secure URL to upload a result screenshot.
      description: Only accessible by a participant of the match.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MatchIdPath'
      requestBody:
        required: true # Made required as per implementation
        content:
          application/json:
            schema:
              type: object
              required: # Added required fields
                - filename
                - contentType
              properties:
                filename:
                  type: string
                  example: "match_result.png"
                contentType:
                  type: string
                  enum: ['image/png', 'image/jpeg', 'image/gif'] # More specific
                  example: "image/png"
      responses:
        '200':
          description: Pre-signed URL generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResultUploadUrlResponse'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Match not found.
        '500':
          description: Internal server error.

  /matches/{id}/results:
    post:
      tags: [Matches]
      summary: Submit the final result after file upload and scan.
      description: Only accessible by a participant of the match. Assumes screenshot is uploaded and scanned.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MatchIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchResultSubmissionRequest'
      responses:
        '200':
          description: Match result submitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchResultResponse'
        '400':
          description: Validation error.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Match not found.
        '500':
          description: Internal server error.

  /matches/{id}:
    get:
      tags: [Matches]
      summary: Get details of a specific match.
      description: Retrieves detailed information about a specific match, accessible by authenticated users (potentially participants or tournament viewers).
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MatchIdPath'
      responses:
        '200':
          description: Match details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDetails' # Needs to be defined
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (User may not have permission to view this match if not a participant or if private).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Match not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Admin Panel Endpoints
  /admin/disputes:
    get:
      tags: [Admin - Disputes]
      summary: Get a list of disputes (for DisputeModerator).
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [OPEN, UNDER_REVIEW, RESOLVED_PARTICIPANT1_WIN, RESOLVED_PARTICIPANT2_WIN, RESOLVED_REPLAY, CLOSED, CLOSED_INVALID] # Added CLOSED_INVALID
          description: Filter by dispute status.
        - name: tournamentId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by tournament ID.
        - name: matchId # Added from code
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by match ID.
        - name: moderatorId # Added from code
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by moderator ID.
      responses:
        '200':
          description: A paginated list of disputes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDisputes'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.

  /admin/disputes/{id}/resolve:
    post:
      tags: [Admin - Disputes]
      summary: Resolve a dispute and determine the winner (for DisputeModerator).
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/DisputeIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveDisputeRequest'
      responses:
        '200':
          description: Dispute resolved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '400':
          description: Validation error.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Dispute not found.
        '500':
          description: Internal server error.

  /admin/withdrawals:
    get:
      tags: [Admin - Withdrawals]
      summary: Get a list of withdrawal requests (for FinanceManager).
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [PENDING_APPROVAL, APPROVED, REJECTED, PROCESSING, COMPLETED, FAILED]
          description: Filter by withdrawal status.
        - name: userId
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Filter by user ID.
      responses:
        '200':
          description: A paginated list of withdrawal requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWithdrawalsAdmin'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '500':
          description: Internal server error.

  /admin/withdrawals/{id}/approve:
    post:
      tags: [Admin - Withdrawals]
      summary: Approve a withdrawal request (for FinanceManager).
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/WithdrawalIdPath'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveWithdrawalRequest'
      responses:
        '200':
          description: Withdrawal request approved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawalForAdmin'
        '400':
          description: Validation error.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Withdrawal request not found.
        '500':
          description: Internal server error.

  /admin/withdrawals/{id}/reject:
    post:
      tags: [Admin - Withdrawals]
      summary: Reject a withdrawal request (for FinanceManager).
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/WithdrawalIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [reason]
              properties:
                reason:
                  type: string
                  example: "Suspected fraudulent activity."
      responses:
        '200':
          description: Withdrawal request rejected successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WithdrawalForAdmin'
        '400':
          description: Validation error.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Withdrawal request not found.
        '500':
          description: Internal server error.

# Placeholder for other routes like users, teams, leaderboards if they have HTTP endpoints
# /users/me (GET) - Get current user's profile (Now explicitly defined under /users)
# /teams (POST, GET) - Manage teams (Future scope)

  /tournaments:
    post:
      tags: [Tournaments]
      summary: Create a new tournament (Admin only).
      description: Allows administrators to create new tournaments.
      security:
        - bearerAuth: [] # Requires Admin role, to be enforced by authorizeRole middleware
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTournamentRequest' # Needs to be defined
      responses:
        '201':
          description: Tournament created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentDetails' # Return full details of created tournament
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden (User is not an Admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
# /leaderboards/{game} (GET) - Get leaderboards (Future scope)
# These are not explicitly detailed in the initial prompt's API list but are in the file structure.
# For now, focusing on the explicitly listed API endpoints.

# Adding user management paths explicitly as per common practice, though not in original list.
# These align with existing users.routes.js implementation.
  /users/me:
    get:
      tags: [Users] # New Tag for User specific operations beyond auth
      summary: Get current user's profile
      description: Retrieves the profile of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicProfile' # Assuming this is the desired response
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError' # If user from token not found
    put:
      tags: [Users]
      summary: Update current user's profile
      description: Allows the authenticated user to update their own profile information.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest' # New schema needed
      responses:
        '200':
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicProfile'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Admin User Management (Conceptual, mirroring users.routes.js)
  # This section would require a new "Admin - Users" tag and schemas for admin updates if different.
  # For brevity, just showing path structure. Actual implementation details from users.routes.js
  # (like AdminUpdateUserSchema) would be reflected here.
  /admin/users:
    get:
      tags: [Admin - Users] # New Tag
      summary: List all users (Admin only)
      security:
        - bearerAuth: [] # RBAC for Admin role
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: role
          in: query
          required: false
          schema:
            type: string
            enum: [User, Admin, DisputeModerator, FinanceManager]
          description: Filter by user role.
        - name: isVerified
          in: query
          required: false
          schema:
            type: boolean
          description: Filter by verification status.
      responses:
        '200':
          description: A paginated list of users.
          content:
            application/json:
              schema: # Define a PaginatedUsers schema
                type: object
                properties:
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                  totalItems:
                    type: integer
                  items: # Changed from 'users' to 'items' for consistency
                    type: array
                    items:
                      $ref: '#/components/schemas/UserPublicProfile' # Or a more detailed AdminUserView
        # Other responses 401, 403, 500

  /admin/users/{id}:
    get:
      tags: [Admin - Users]
      summary: Get a specific user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicProfile' # Or AdminUserView
        # Other responses 401, 403, 404, 500
    put:
      tags: [Admin - Users]
      summary: Update a user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUserRequest' # New schema needed
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicProfile' # Or AdminUserView
        # Other responses 400, 401, 403, 404, 500
    delete:
      tags: [Admin - Users]
      summary: Delete a user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200': # Or 204 No Content
          description: User deleted successfully.
        # Other responses 401, 403, 404, 500

# Need to define new schemas and responses mentioned above
# e.g., UpdateUserProfileRequest, AdminUpdateUserRequest, PaginatedUsers, NotFoundError, BadRequestError, UnauthorizedError
# For brevity, these are not fully fleshed out here but would be needed for a complete spec.
# Adding a few for completeness:
  responses: # Common responses
    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Unauthorized access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestError:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

# New Schemas (examples)
    UpdateUserProfileRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          description: "New username. Must be unique if changed."
        # Add other updatable fields by user, e.g., bio, avatarUrl.
        # Email/password changes should be handled via separate, more secure flows.
      minProperties: 1 # At least one field to update

    AdminUpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
        email:
          type: string
          format: email
        role:
          type: string
          enum: [User, Admin, DisputeModerator, FinanceManager]
        isVerified:
          type: boolean
      minProperties: 1

    # Auth additional schemas
    VerifyEmailRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: "The verification token received by email."
          example: "verylongverificationtokenstring"

    VerifyEmailResponse:
      type: object
      properties:
        message:
          type: string
          example: "Email verified successfully."
        userId:
          type: string
          format: uuid
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"

    RequestVerificationEmailResponse:
      type: object
      properties:
        message:
          type: string
          example: "Verification email sent. Please check your inbox."

    # User Game Profile Schemas
    UserGameProfileBase:
      type: object
      properties:
        gameId:
          type: string
          format: uuid
          description: "ID of the game."
          example: "c1d2e3f4-a5b6-7890-1234-567890abcdef"
        inGameName:
          type: string
          description: "User's in-game name or identifier for this game."
          example: "PlayerOne#1234"
        additionalInfo:
          type: object
          nullable: true
          description: "Any other game-specific details, e.g., region, platform."
          example: { region: "NA", platform: "PC" }

    UserGameProfileRequest:
      allOf:
        - $ref: '#/components/schemas/UserGameProfileBase'
      required: # Make gameId and inGameName required for creation/update
        - gameId
        - inGameName

    UserGameProfileResponse:
      allOf:
        - $ref: '#/components/schemas/UserGameProfileBase'
        - type: object
          properties:
            userId:
              type: string
              format: uuid
              description: "ID of the user."
            id: # Assuming game profiles have their own ID
              type: string
              format: uuid
              description: "ID of the user game profile record."
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    ListOfUserGameProfiles:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/UserGameProfileResponse'
        count:
          type: integer
          example: 1

# Add new tags if used
# - name: Users
#   description: User profile management.
# - name: Admin - Users
#   description: User management by administrators.
  - name: User Game Profiles
    description: Manage user's game-specific profiles (in-game names, etc.).


# The above paths for /users/me and /admin/users are added to reflect common practice and existing code.
# The original OpenAPI spec was minimal on these.
# Full definition of these would require more detailed schema definitions.
# The changes for wallet history, idempotency key, and withdrawalMethodDetails are more direct modifications.
# The /matches/{id}/results/upload-url requestBody is also made required=true with required fields.
# Ensure all $ref paths are correct.

# Add new paths for auth and user game profiles

  /auth/request-verification-email:
    post:
      tags: [Authentication]
      summary: Request a new email verification link.
      description: User must be authenticated. The verification email is sent to the user's registered email address.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification email sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestVerificationEmailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found or email not associated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError' # Added for consistency

  /auth/verify-email:
    post:
      tags: [Authentication]
      summary: Verify user's email using a token.
      description: Submits the token received via email to verify the user's email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmailResponse'
        '400':
          description: Invalid or expired token, or other validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError' # Added for consistency

  /users/me/game-profiles:
    get:
      tags: [User Game Profiles]
      summary: Get all game profiles for the current user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of the user's game profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfUserGameProfiles'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [User Game Profiles]
      summary: Create or update a game profile for the current user.
      description: If a profile for the given gameId already exists for the user, it will be updated. Otherwise, a new one is created.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGameProfileRequest'
      responses:
        '200': # For update
          description: Game profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGameProfileResponse'
        '201': # For create
          description: Game profile created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGameProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Game ID not found (if validation is performed).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me/game-profiles/{gameId}:
    get:
      tags: [User Game Profiles]
      summary: Get a specific game profile for the current user by game ID.
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          description: ID of the game for which to retrieve the profile.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The user's game profile for the specified game.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGameProfileResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Game profile not found for this user and game.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

# Common responses (ensure this section exists and is referenced)
  responses:
    NotFoundError:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Unauthorized access.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestError:
      description: Invalid request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError: # Added for consistency
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
