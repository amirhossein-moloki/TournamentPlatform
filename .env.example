# Application Configuration
NODE_ENV=development
PORT=3000
API_BASE_URL=/api/v1

# Database Configuration (PostgreSQL)
DB_HOST=localhost
DB_PORT=5432
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=tournament_platform_db
DB_SSL_ENABLED=false # Set to true if using SSL for DB connection

# JWT Configuration
JWT_SECRET=your_jwt_secret_key # Replace with a strong, random key
JWT_ACCESS_TOKEN_EXPIRATION=15m # Access token expiry (e.g., 15 minutes)
JWT_REFRESH_TOKEN_EXPIRATION=7d # Refresh token expiry (e.g., 7 days)
JWT_REFRESH_COOKIE_NAME=jid # Name of the refresh token cookie

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD= # Optional: if your Redis instance is password protected
REDIS_TLS_ENABLED=false # Set to true if using TLS for Redis connection

# RabbitMQ Configuration
RABBITMQ_URL=amqp://guest:guest@localhost:5672 # RabbitMQ connection string
RABBITMQ_PRIZE_QUEUE=prize_payout_queue
RABBITMQ_DISPUTE_QUEUE=dispute_resolution_queue
RABBITMQ_FILE_SCAN_QUEUE=file_scan_queue

# Payment Gateway Configuration
PAYMENT_GATEWAY_API_KEY=your_payment_gateway_api_key
PAYMENT_GATEWAY_WEBHOOK_SECRET=your_payment_gateway_webhook_secret # For verifying webhook signatures

# AWS S3 Configuration (for secure file uploads)
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_REGION=your_aws_region
AWS_S3_BUCKET_NAME=your_s3_bucket_name
AWS_S3_SIGNED_URL_EXPIRATION=300 # Expiration time for signed URLs in seconds (e.g., 5 minutes)

# Logging Configuration
LOG_LEVEL=info # (e.g., error, warn, info, http, verbose, debug, silly)
LOG_FILE_PATH=logs/app.log
LOG_ERROR_FILE_PATH=logs/error.log

# Admin User Seeder Configuration
ADMIN_EMAIL=admin@example.com
ADMIN_PASSWORD=StrongAdminPassword123! # Change this in your actual .env file

# Rate Limiting
RATE_LIMIT_WINDOW_MS=15 * 60 * 1000 # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100 # Max requests per window per IP

# CORS Configuration (if needed, Express default is restrictive)
CORS_ORIGIN=* # Or specify allowed origins: http://localhost:3001,https://yourfrontend.com

# Secret Management (Example: HashiCorp Vault - specific variables depend on integration)
# VAULT_ADDR=your_vault_address
# VAULT_TOKEN=your_vault_token

# Webhook Idempotency Key Header Name (as per your design choice)
IDEMPOTENCY_KEY_HEADER=X-Idempotency-Key

# Zarinpal Payment Gateway Configuration
ZARINPAL_MERCHANT_ID=YOUR_ZARINPAL_MERCHANT_ID_HERE # Replace with your actual Zarinpal Merchant ID
# ZARINPAL_ACCESS_TOKEN=YOUR_ZARINPAL_ACCESS_TOKEN_HERE # Optional: Add if using features like refunds

# Email Service Configuration
EMAIL_SERVICE_PROVIDER=CONSOLE # Options: CONSOLE, SES, SENDGRID
EMAIL_SENDER_ADDRESS=noreply@example.com # Required if provider is SES or SENDGRID
SENDGRID_API_KEY= # Required if provider is SENDGRID
# AWS_SES_REGION=your_aws_ses_region # Optional: Defaults to AWS_REGION if using SES. Required if SES is in a different region.
